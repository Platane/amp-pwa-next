// /**
//  * get the hash generated by next
//  * which will be used as cache buster for additional asset that we will add
//  */
// const hash = __precacheManifest.reduce((h, { url }) => {
//   const m = url.match(/static\/(?<hash>[^\/]+)\/pages\//);
//   return h || (m && m.groups.hash);
// }, null);

// const appRootUrl = "/?__WB_REVISION__=" + hash;

// const appShellUrl = "/pwa-shell?__WB_REVISION__=" + hash;

// const ampScriptUrl = "/assets/fav-button-script.js?__WB_REVISION__=" + hash;

// const removeTrailingSlash = (s) => "/" + s.split("/").filter(Boolean).join("/");

import { precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate, CacheFirst } from "workbox-strategies";
import { createHandlerBoundToURL } from "workbox-precaching";
import { ExpirationPlugin } from "workbox-expiration";
import { isAmpPage } from "../custom-router/isAmpPage";

const manifest: {
  url: string;
  revision: string;
}[] = (self as any).__WB_MANIFEST;

/**
 * pre cache assets
 */
precacheAndRoute(manifest);

/**
 * upon navigation, serve the pwa shell instead
 */
const handler = createHandlerBoundToURL("/app-shell");
registerRoute(
  ({ url, event }) =>
    event.request.mode === "navigate" && isAmpPage(url.pathname),

  handler
);

/**
 * cache pages
 */
registerRoute(
  ({ url }) => [/^\/movie\/[^/]+$/].some((re) => url.pathname.match(re)),

  new CacheFirst({
    cacheName: "content-cache",
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 60,
        maxEntries: 20,
      }),
    ],
  })
);
registerRoute(
  ({ url }) => ["/", "/api/movie"].includes(url.pathname),

  new StaleWhileRevalidate({
    cacheName: "content-cache",
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 6 * 60 * 60,
        maxEntries: 10,
      }),
    ],
  })
);

export {};
